# ========================================================================
# Copyright (c) 2016 - Julien Caillon (julien.caillon@gmail.com)
# This file is part of 3P.
#
# 3P is a free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# 3P is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with 3P. If not, see <http://www.gnu.org/licenses/>.
# ========================================================================
# Modify this file freely, it allows you to build a set of rules to deploy a file (r-code or any file)
#
# ======================
# Two type of rules exist :
# 
# - Transfer rules : they define when / where / how a file should be deployed
# - Filter rules : they define which files are eligible to the deployment
# 
## ======================
# Each transfer rule as 5 components separated by tabulations :
# step	name	suffix	type	source_pattern
# 
# - The deployment step : integer (a rule is always defined for a particular step)
# - The application name filter : If the application name of your current environment matches this filter (you can use wildcards), the rule can apply 
# - The application suffix filter : If the application suffix of your current environment matches this filter (you can use wildcards), the rule can apply 
# - Rule type : `+` / `` (or `Include` / `Exclude`) decide if the files matching the *source path pattern* below are included or excluded from the deployment
# - The source path pattern : when deploying, if a file matches this pattern (you can use wildcards), the rule can apply
# 
## ======================
# Each transfer rule as 7 components :
# step	name	suffix	type	next?	source_pattern	deploy_target
# 
# - The deployment step : integer (a rule is always defined for a particular step)
# - The application name filter : If the application name of your current environment matches this filter (you can use wildcards), the rule can apply 
# - The application suffix filter : If the application suffix of your current environment matches this filter (you can use wildcards), the rule can apply 
# - The deployment type : `Move` / `Copy` / `Prolib` (the file will be added to a progress library .pl) / `Ftp` (the file will be sent to an ftp server) / `Ftp` (see next ยง for more details)
# - Execute further rules : `yes` / `no` : yes if more rules can be applied after this one, no to stop at this rule
# - The source path pattern : when deploying, if a file matches this pattern (you can use wildcards), the rule can apply
# - The deployment target : It can either be an absolute path or a relative one; If relative, it will be relative to the deployment base directory set for your current environment
#
## ======================
# Type of transfers :
# - Move
# - Copy
# - Prolib : the deployment target must then contain a .pl file, you can adopt the syntax `file.pl\mysubfolder\` to put the file into a special path inside the .pl
# - Zip : the deployment target must then contain a .zip file, you can adopt the syntax `file.zip\mysubfolder\` to put the file into a special path inside the .pl
# - Ftp : the deployment target must follow the syntax `ftp://username:password@server:port/distant/path/` with username, password and port being optionnal; `/distant/path/` represents the path on the ftp server on which to put the deployed file
# 
#
## ======================
# The following rules are applied during a deployment, work around them to get exactly what you need :
# 
# **Rules sorting (from most important to less important) :**
# 
# - exact application name first
# - longer application name filter first
# - exact application suffix first
# - longer application suffix filter first
# - rules with *execute further rules* = `yes` first
# - `Prolib` before `Zip` before `Ftp` before `Copy` before `Move`
# - rules defined first, first (line number in the file)
# 
# **Other rules :**
# 
# - A file can have several rules applied to it; however, the first `Move` rule encountered will be the last rule applied
# - When no filter rules are defined then all the files are considered (this is only true if there are NO filter rules AT ALL for a given step)
# - For step 0, if no transfer rules can be applied to a file, then the file will be `Moved` to the deployment base directory by default
# - For other steps, if no transfer rules apply then the file is not transfered at all
# - For step 0, if the environment is set to `compile next to source` then the *.r will be moved next to the source and no transfer rules will apply
# ========================================================================

# Examples (commented with #) :

#0	*	*	Ftp 	yes	*myfilter\*	ftp://progress@127.0.0.1/myfolder/deploy/
#0	*	*	Prolib	No	*myfilter\*	file.pl
#0	*	*	Zip 	no	*.myfilter	file.zip
#0	*	*	Copy	yes	*.thing 	C:\temp\
#0	*	*	Move	no	*.thing 	temp\2\